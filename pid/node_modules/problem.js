if (typeof define !== 'function') { var define = require('amdefine')(module) }

define([], function () {
	function getMagnitude(_vector) {
		var vector = _vector.slice();
		var magnitude = 0;
		for(var i = 0; i < vector.length; i++) {
			magnitude += Math.pow(vector[i], 2);
		}
		magnitude = Math.sqrt(magnitude)
		return magnitude;
	}

	function normalize(_vector) {
		var vector = _vector.slice();
		var magnitude = getMagnitude(vector);
		for(var i = 0; i < vector.length; i++) {
			vector[i] = vector[i] / magnitude;
			if(vector[i] < 0)
				vector[i] = 0;
		}
		return vector;
	}
	
	var Easom = function() {
		this.getScore = function(solution) {
			normalize(solution);
			var bestScore = -1;
			var min = -100;
			var range = Math.abs(min*2);
			var x = min + (range*solution[0]);
			var y = min + (range*solution[1]);
			var soln = -1 * (Math.cos(x)) * (Math.cos(y));
			soln *= Math.exp(-1 * (Math.pow((x-Math.PI),2) + Math.pow((y-Math.PI),2)));
			
			soln += (-bestScore);
			return soln;
		}

		this.getSolutionSize = function() {
			return 2;
		}
		
		this.getLatency = function() {
			return 0;
		}
	};

	var EggHolder = function() {
		this.getScore = function(_solution) {
			var solution = _solution.slice(0);
			console.log("Solution: " + solution);
			normalize(solution);
			console.log("Solution (norm): " + solution);
			var bestScore = -959.6407;
			var min = -512;
			var range = Math.abs(min*2);
			var x = Number(min) + (range*solution[0]);
			var y = Number(min) + (range*solution[1]);
			//var x = range*solution[0];
			//var y = range*solution[1];
			var soln = -1 * ((y+47) * Math.sin(Math.sqrt(Math.abs(y + (x/2) + 47))));
			soln -= x * (Math.sin(Math.sqrt(Math.abs(x - (y+47)))));
			
			soln += (-1*bestScore);
			if(soln < 268)
				console.log(soln);
			return soln;
		}

		this.getSolutionSize = function() {
			return 2;
		}
		
		this.getLatency = function() {
			return 0;
		}
	};

	var Ackley = function() {
		this.getScore = function(_solution) {
			var solution = _solution.slice(0);
			//console.log("Solution (norm): " + solution);
			var x = (solution[0]*64)-32;	
			var y = (solution[1]*64)-32;	
			if(x < 0.0 || x > 1.0 || y < 0.0 || y > 1.0)
				solution = normalize(solution);
				
			//console.log("x: " + x + ", y: " + y);	
			//x = 30.135;
			//y = 29.8823;

			var soln = -20 * Math.exp(-0.2*Math.sqrt(0.5*((x*x) + (y*y))));
			soln -= Math.exp(0.5*(Math.cos(2*Math.PI*x)+Math.cos(2*Math.PI*y)));
			soln += Math.exp(1) + 20;

			return soln;
		}

		this.getSolutionSize = function() {
			return 2;
		}
		
		this.getLatency = function() {
			return 0;
		}
	};

	var Beale = function() {
		this.getScore = function(_solution) {
			//Range is -4.5 to 4.5
			var solution = _solution.slice(0);
			if(x < 0.0 || x > 1.0 || y < 0.0 || y > 1.0)
				solution = normalize(solution);
			var x = (solution[0]*9)-4.5;	
			var y = (solution[1]*9)-4.5;	
			//var min = -4.5;
			//var range = Math.abs(min*2);
			//var x = min + (range*solution[0]);
			//var y = min + (range*solution[1]);
			var soln = Math.pow((1.5 - x + (x*y)),2);
			soln += Math.pow((2.25 - x + (x*Math.pow(y, 2))),2);
			soln += Math.pow((2.625 - x + (x*Math.pow(y,3))),2);
			return soln;
		}

		this.getSolutionSize = function() {
			return 2;
		}
		
		this.getLatency = function() {
			return 0;
		}
	};

	var count = 0; 
	var http = require('http');
	var express = require('express');
	var total_time = 0;


	var PID = function() {
		this.getScore = function(_solution) {
			var solution = _solution.slice(0);
			//console.log("Solution in problem: " + solution);
			for(var i = 0; i < solution.length; i++) {
				solution[i] = solution[i] * 400;
				solution[i] -= 200;
				solution[i] = Number(solution[i]).toFixed(4);
			}
			//console.log("Solution in problem (after): " + solution);
			var blocker;
			//TODO: Possibly limit variable ranges
			//var _path = "/error?data=20 .02 "+solution[0]+" "+solution[1]+" "+solution[2]+" "+solution[3]+" "+solution[4]+" "+solution[5];
			var _path = "/u?data=20 .02 "+solution[0]+" "+solution[1]+" "+solution[2]+" "+solution[3]+" "+solution[4]+" "+solution[5];
			_path = _path.replace(/ /g, "%20");
			
			var options = {
				//host: 'node-0.bioinspired2.cloudrobotics-pg0.wisc.cloudlab.us',
				//host: 'node-0.bioinspired.cloudrobotics-pg0.clemson.cloudlab.us',
				host: 't3.cs.clemson.edu',
				path: _path,
			};
			//console.log(_path);
			//console.log(solution);
			var str;
			callback = function(response) {
				str = '';
				//another chunk of data has been recieved, so append it to `str`
				response.on('data', function (chunk) {
					str += chunk;
				});

				//the whole response has been recieved, so we just print it out here
				response.on('end', function () {
					//console.log(str);
					blocker = "hello";
				});
			}
			var d = new Date();
			var startTime = d.getTime();
			
			http.get(options, callback);
			while(blocker === undefined) { 
				try{
					require('deasync').runLoopOnce();
				}
				catch(err){
					console.log(err.message);
				}
			}
			var d2 = new Date();
			var endTime = d2.getTime();
			total_time += (endTime - startTime);
			//console.log((total_time/1000) + " seconds");
			count++;
			return -1*Number(str);
		}

		this.getSolutionSize = function() {
			return 6;
		}

		this.getLatency = function() {
			return total_time;
		}
	};

	var generateFunctionProblem = function(func) {
		var retFunc;
		switch(func) {
			case "pid":
				retFunc = new PID();
				break;
			case "beale":
				retFunc = new Beale();
				break;
			case "eggholder":
				retFunc = new EggHolder();
				break;
			case "easom":
				retFunc = new Easom();
				break;
			case "ackley":
				retFunc = new Ackley();
				break;
			default:
				break;
		}
		return retFunc;
	};

	return {
			generateFunctionProblem: generateFunctionProblem,
	};
});
