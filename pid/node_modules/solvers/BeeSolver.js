define([], function (){
function BeeSolver(Problem, Parameters){
	this.exNum = Parameters["BeeParam6"];
	this.numActive = Parameters["BeeParam1"];
	this.numInactive = Parameters["BeeParam2"];
	this.numScout = Parameters["BeeParam3"];
	this.probSize = Problem.getSolutionSize();
	this.totalBees = this.numScout + this.numInactive + this.numActive;
	this.probPersuasion = Parameters["BeeParam5"];
	this.probMistake = Parameters["BeeParam4"];
	this.bestLength = 0;	
	this.inactiveArray = new Array(this.numInactive);
	this.Bees = InitEmpBees(this.totalBees, this.probSize);
	this.status = new Array(this.Bees.length);
	for(var i = 0; i < this.Bees.length; ++i){
		if(i < this.numInactive){
			this.status[i] = 0;
			this.inactiveArray[i] = i
		}
		else if( i < this.numInactive + this.numScout)
			this.status[i] = 2;
		else
			this.status[i] = 1;
	}
	this.exhausted = new Array(this.Bees.length);
	for(var i = 0; i < this.Bees.length; ++i){
	    this.exhausted[i] = 0; // initializing the exhausted number
	}
	this.prev = this.Bees[0].slice(0);
	this.bestTrail = this.Bees[0].slice(0);
	this.bestLength = Problem.getScore(this.bestTrail);

	BeeSolver.prototype.step = function() {
		for(var i = 0; i < this.totalBees; ++i){
		   	if(this.status[i] == 1){
		   		this.bestTrail = ProcessActiveBees(i, this.Bees, this.status, this.exNum, this.exhausted, this.probMistake, this.inactiveArray, this.bestTrail, this.probPersuasion, Problem);		 
           	}
		   	else if(this.status[i] == 2){
		   	 	this.bestTrail = ProcessScoutBees(i, this.Bees, this.bestTrail, this.inactiveArray, this.probPersuasion, Problem);
		   	}
		}

		if(Problem.getScore(this.prev) < Problem.getScore(this.bestTrail)) {
			this.bestTrail = this.prev.slice(0);
			this.bestLength = Problem.getScore(bestTrail);
		}
		this.bestLength = Problem.getScore(this.bestTrail);
		return [normalize(this.bestTrail)];
	}
}

function normalize(vector) {
	var norm = [];
	var sum = 0;
	for(var i = 0; i < vector.length; i++) {
		sum += vector[i];
	}
	sum = 1/sum;
	norm = vecScale(vector, sum);
	return norm;
}

function vecScale(veca, scalar) {
	var scaled = [];
	for(var i = 0; i < veca.length; i++){
		scaled[i] = veca[i] * scalar;
	}
	return scaled;
}

function ProcessActiveBees(i, bees, status, exNum, exhausted, probMis, inArr, bestTrail, pers, Problem) {
	var neighbor = CreateNeighbor(bees[i]);
	var neighborFit = Problem.getScore(neighbor);
	var prob = Math.random();
	var updated = false;
	var curEx = false;
	if(neighborFit < Problem.getScore(bees[i])) {
		if(prob < probMis){
			++exhausted[i];
			if(exhausted[i] > exNum)
				curEx = true;
		}
		else{
			bees[i] = neighbor.slice(0);
			exhausted[i] = 0;
			updated = true;
		}
	}
	else{
		if(prob < probMis){
			bees[i] = neighbor.slice(0);
			exhausted[i] = 0;
			updated = true;
		}
		else{
			++exhausted[i];
			if(exhausted[i] > exNum)
				curEx = true;
		}
	}
	if(curEx == true){
	   status[i] = 0;
	   exhausted[i] = 0;
	   var index = Math.floor(Math.random() * inArr.length);
	   status[inArr[index]] = 1; // now active
	   inArr[index] = i;
	}
	else if(updated == true){
		if(Problem.getScore(bees[i]) < Problem.getScore(bestTrail)) {
			bestTrail = bees[i].slice(0);
		}
	   	DoWaggleDance(i, inArr, bees, pers, Problem);
	}
	return bestTrail;
}

function ProcessScoutBees(i, bees, bestTrail, inArr, pers, Problem){
	var randomTrail = RandomTrail(Math.floor(Math.random() * bees[0].length), bees[0].length);
	if(Problem.getScore(randomTrail) < Problem.getScore(bees[i])) {
		bees[i] = randomTrail.slice(0);
		if(Problem.getScore(bees[i]) < Problem.getScore(bestTrail)) {
		    bestTrail = bees[i].slice(0);
		}
		
		DoWaggleDance(i, inArr, bees, pers, Problem); 
	}
	return bestTrail;
}

function DoWaggleDance(i, inArr, bees, pers, Problem){
	for(var j = 0; j < inArr.length; ++j){
	   var index = inArr[j];
		if(Problem.getScore(bees[i]) < Problem.getScore(bees[j])) {
	   		var r = Math.random();
			if(pers > r){
			    bees[index] = bees[i].slice(0);
			}
	   }
	}
}

function GetRandomPhi(){
   return Math.random() * 2 + -1;
}

function GetRandomBee(ind, length)
{
	var rand = ind;
	while(ind == rand){
		rand = Math.floor(Math.random() * length )
	}
	return rand;
}

function CreateNeighbor(bee){
   var neighbor = bee.slice(0);
   var ranIndex = Math.floor(Math.random() * bee.length);
   var adjIndex = 0;
   if(ranIndex != bee.length - 1)
   	  adjIndex = ranIndex + 1;
   var tmp = neighbor[ranIndex];
   neighbor[ranIndex] = neighbor[adjIndex];
   neighbor[adjIndex] = tmp;
   return neighbor;
}

function InitEmpBees(numEmpBees, probSize){
	var bees = _.range(numEmpBees);
	bees = _.map(bees, function(){
		return _.map(_.range(probSize), function() { 
			return Math.random();
			}); 
		});
	return bees;
}

function RandomTrail(start, probSize){
            var trail = new Array(probSize);

            for (var i = 0; i < probSize; ++i) { trail[i] = i; } // sequential

            for (var i = 0; i < probSize; ++i) // Fisher-Yates shuffle
            {
                var r = Math.floor(Math.random() * (probSize- 1));
                var tmp = trail[r]; trail[r] = trail[i]; trail[i] = tmp;
            }

            var idx = IndexOfTarget(trail, start); // put start at [0]
            var temp = trail[0];
            trail[0] = trail[idx];
            trail[idx] = temp;

            return trail;
}

function IndexOfTarget(trail, target){
   var temp = 0;
   for (var i = 0; i < trail.length; ++i)
   {
      if (trail[i] == target)
          return i;
   }
   return temp;
}

function Display(trail){
	var str = "";
	for (var i = 0; i < trail.length; ++i)
    {
         str = str + trail[i] + " ";
	}
    console.log(str);
}

return {Solver: BeeSolver, Params: [ {"name": "Number of Active Bees",
									  "id" : "BeeParam1",
									  "type": "int",
									  "value": 2},
									 {"name": "Number of Inactive Bees",
									  "id" : "BeeParam2",
									  "type": "int",
									  "value": 2},
									 {"name": "Number of Scout Bees",
									  "id" : "BeeParam3",
									  "type": "int",
									  "value": 4},
									 {"name": "Mistake Rate",
									  "id" : "BeeParam4",
									  "type": "float",
									  "value": .25},
									 {"name": "Persuasion Rate",
									  "id" : "BeeParam5",
									  "type": "float",
									  "value": .15},
									 {"name": "Food Exhaustion Rate",
									  "id" : "BeeParam6",
									  "type": "int",
									  "value": 92},
								   ]};

});
