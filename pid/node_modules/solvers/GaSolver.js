define([], function (){
	function GaSolver(Problem, Parameters){
		this.numGenes = Parameters["GaParam1"];
		this.Problem = Problem;
		this.probSize = this.Problem.getSolutionSize();
		this.crossRate = Parameters["GaParam2"];
		this.mutationRate = Parameters["GaParam3"];
		this.genes = InitGenes(this.numGenes, this.probSize);
		this.fitness = Fitness(this.genes, this.Problem);
		this.bestLength = 1000000;
		this.bestTrail = this.genes[0];
	}
	GaSolver.prototype.step = function(){
		this.genes.sort(SortGenes(this.Problem));
		localSearch(this.genes, this.fitness, this.Problem);
		this.genes = SelectParents(this.fitness, this.genes);
		this.genes = Crossover(this.genes, this.crossRate);
		this.genes = Mutate(this.genes, this.mutationRate);
		this.fitness = Fitness(this.genes, this.Problem);
		var ind = GetBestFitness(this.fitness);
		var fit = this.Problem.getScore(this.genes[ind]);
		if(fit < this.bestLength){
			this.bestLength = fit;
			this.bestTrail = this.genes[ind];
		}
		return [normalize(this.genes[ind].slice(0))];
	}

	function getMagnitude(vector) {
		var magnitude = 0;
		for(var i = 0; i < vector.length; i++) {
			magnitude += Math.pow(vector[i], 2);
		}
		magnitude = Math.sqrt(magnitude)
			return magnitude;
	}

	function normalize(vector) {
		var magnitude = getMagnitude(vector);
		for(var i = 0; i < vector.length; i++) {
			vector[i] = Number(Math.abs(vector[i] / magnitude).toFixed(2));
		}
		return vector;
	}

	function vecScale(veca, scalar) {
		var scaled = [];
		for(var i = 0; i < veca.length; i++){
			scaled[i] = veca[i] * scalar;
		}
		return scaled;
	}

	function GetBestFitness(fitness){
		// get the parent with the best fitness
		var bestFit = fitness[0];
		var bestInd = 0;
		for(var i = 1; i < fitness.length; ++i){
			if(fitness[i] < bestFit){
				bestFit = fitness[i];
				bestInd = i;
			}
		}
		return bestInd;
	}

	function SortGenes(problem){
		return function(a,b){
			var l1 = problem.getScore(a.slice(0));
			var l2 = problem.getScore(b.slice(0));
			if(l1 < l2)
				return 1;
			if(l1 > l2)
				return -1;
			return 0;
		}
	}

	function GetRandomGene(ind, length)
	{
		var rand = ind;
		while(ind == rand){
			rand = Math.floor(Math.random() * length )
		}
		return rand;
	}

	function localSearch(genes, fitness, problem){

		for(var i = 0; i < genes.length; ++i){
			var tempGene = new Array(genes[0].length);
			for(var j = 0; j < genes[0].length; ++j){
				var randGene = GetRandomGene(i, genes.length);
				tempGene[j] = Number(genes[i][j]) + (GetRandomPhi() * (genes[i][j] - genes[randGene][j]));
			}
			var tempFitness = problem.getScore(tempGene);
			if(tempFitness < fitness[i]){
				fitness[i] = tempFitness;
				genes[i] = tempGene;
			}
		}

	}

	function GetRandomPhi(){
		return Math.random();
	}

	function SelectParents(fitness, genes){
		// Setting initial 2 parents to the best fit gene
		var selection = new Array();
		// Roullete Style Selection
		var sum = Number(0.0);

		for(var i = 0; i < fitness.length; i++){
			sum = sum + fitness[i];
		}
		var relFitness = new Array();
		for(var j = 0; j < fitness.length; j++){
			relFitness.push(fitness[j] / sum);
		}
		var prob = new Array(fitness.length);
		prob[0] = relFitness[0];
		for(var i = 1; i < fitness.length; ++i){
			prob[i] = prob[i - 1] + relFitness[i];
		}
		var count = 0;
		while(count < genes.length){
			var n = Math.random();
			for(var i = 0; i < genes.length; ++i){
				if(n <= prob[i] && count < genes.length){
					selection.push(genes[i]);
					count++;
				}
			}
		}
		return selection;
	}

	//function compare(gene1, gene2, dists){
	//   if(Length(gene1, dists) < Length(gene2, dists))
	//      return -1;
	//   if(Length(gene1, dists) > Length(gene2, dists))
	//      return 1;
	//   return 0;
	//}

	function Crossover(population, crossRate){
		for(var i = 0; i < population.length - 1; i = i + 2){
			if(Math.random() < crossRate){
				var ind1 = Math.floor(Math.random() * (population[i].length - 1));
				var ind2 = Math.floor(Math.random() * (population[i].length - 1));
				if(ind2 > ind1){
					var temp = ind1;
					ind1 = ind2;
					ind2 = temp;
				}
				var Parent1 = population[i].slice();
				var Parent2 = population[i + 1].slice();
				var child1 = new Array(population[i].length);
				var child2 = new Array(population[i].length);
				for(var k = 0; k < child1.length; ++k){
					child1[k] = -1; 
					child2[k] = -1;
				}
				for(var k = ind1; k <= ind2; ++k){
					child1[k] = Parent1[k];
					child2[k] = Parent2[k];
				}
				for(var k = 0; k < ind1; ++k){
					child1[k] = Parent2[k];
					child2[k] = Parent1[k];
				}
				for(var k = ind2 + 1; k < Parent1.length; ++k){
					child1[k] = Parent2[k];
					child2[k] = Parent1[k];
				}
				population[i] = child1;
				population[i + 1] = child2;


			}
		}
		return population;
	}

	Array.prototype.contains = function(val){
		for(var k = 0; k < this.length; ++k){
			if(this[k] == val)
				return true;
		}
		return false;
	}

	function Mutate(selection, rate){
		var mutation = new Array(selection.length);
		for(var i = 0; i < selection.length; i++){ 
			var N = Math.random();
			if(N < rate){
				var ind1 = Math.floor(Math.random() * (selection[i].length - 1));
				var ind2 = Math.floor(Math.random() * (selection[i].length - 1));
				if(ind1 < ind2){
					mutation[i] = Reverse(ind1, ind2, selection[i].length, selection[i]);
				}
				else
					mutation[i] = Reverse(ind2, ind1, selection[i].length, selection[i]);
			}
			else
				mutation[i] = selection[i];
		}
		return mutation;
	}

	function Reverse(start, end, probSize, trail){
		while(start != end){
			trail = swap(start, end, trail);
			end--;
			if(end == start) 
				return trail;
			start++;
			if(end == -1)
				end = probSize - 1;
			if(start == probSize)
				start = 0;
		}
		return trail;
	}

	function swap(x, y, trail){
		var temp = trail[x];
		trail[x] = trail[y];
		trail[y] = temp;
		return trail;
	}

	function InitGenes(numGenes, probSize){
		var genes = new Array(numGenes);
		for (var k = 0; k < numGenes; ++k)
		{
			genes[k] = RandomTrail(probSize);
		}
		return genes;
	}


	function RandomTrail(probSize){
		var trail = new Array(probSize);

		for (var i = 0; i < probSize; ++i) { 
			trail[i] = Math.random(); // between -1 and 1 
		} // sequential

		return trail;
	}

	function Fitness(genes, problem){
		var fitness = new Array(genes.length);
		for(var i = 0; i < genes.length; i++){
			//console.log("Scoring Gene " + i);
			fitness[i] = problem.getScore(genes[i]);
		}
		return fitness;
	}


	return {Solver: GaSolver,
		Params: [                 {"name": "Number of Genes",
			"id" : "GaParam1",
			"type": "int",
			"value": 20},   
		{"name": "Crossover Rate",
			"id" : "GaParam2",
			"type": "float",
			"value": 0.8},
			{"name": "Mutation Rate",
				"id" : "GaParam3",
				"type": "float",
				"value": 0.1}      
		]                       
	}; 

});
