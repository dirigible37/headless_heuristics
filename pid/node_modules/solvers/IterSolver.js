define([], function () {
function IterSolver(Problem, Parameters){
   this.numCities = Problem.getSolutionSize();
   this.Problem = Problem;
   //this.convert = Problem.weightedSolutionToTrail;
   this.trail = RandomTrail(this.numCities);
   this.bestLength = -1;
   this.dist = this.Problem.getScore(this.trail);
   this.iter = 1;
   this.prevDist = -1;
}

IterSolver.prototype.step = function(){
	    var prevDist = this.dist;
		var tempInd1 = 0;
		var tempInd2 = 0;
		for(var j = 0; j < this.numCities; j++){
		   for(var k = j + 1; k < this.numCities; k++){
			   this.trail = Reverse(j,k,this.numCities,this.trail);
			   var tempDist = this.Problem.getScore(this.trail);
			   if(tempDist < this.dist){
			      this.dist = tempDist;
				  tempInd1 = j;
				  tempInd2 = k;
			   }
			   this.trail = Reverse(j,k,this.numCities, this.trail);
		   }
		}
		this.trail = Reverse(tempInd1, tempInd2, this.numCities, this.trail);
		this.bestLength = this.Problem.getScore(this.trail); 
		this.iter++;

    return [this.trail];
}

function RandomTrail( numCities){
   var trail = new Array(numCities);

            for (var i = 0; i < numCities; ++i) { trail[i] = Math.random() * 5 - 5; } // sequential

            return trail;
}

function Display(trail){
	var str = "";
	for (var i = 0; i < trail.length; ++i)
    {
         str = str + trail[i] + " ";
	}
    console.log(str);
}

function Reverse(start, end, numCities, trail){
   while(start != end){
      trail = swap(start, end, trail);
      end--;
      if(end == start) 
        return trail;
      start++;
      if(end == -1)
         end = numCities - 1;
      if(start == numCities)
         start = 0;
   }
   return trail;
}

function swap(x, y, trail){
   var temp = trail[x];
   trail[x] = trail[y];
   trail[y] = temp;
   return trail;
}

return {Solver: IterSolver, Params: []};

});
