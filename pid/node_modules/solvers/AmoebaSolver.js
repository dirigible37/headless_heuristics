define([], function () {
function AmoebaSolver(Problem, Parameters) {

		var reflectionCoeff = Parameters["amParam1"]; //reflection coefficient
		var expansionCoeff = Parameters["amParam2"]; //expasion coefficient
		var contractionCoeff = Parameters["amParam3"]; //contraction coefficient
		var shrinkCoeff = Parameters["amParam4"]; //shrink coefficient
		var n = Math.floor(Parameters["amParam5"]); //n is the amount of amoeba "legs". (getSolutionSize was too large)
		var size = Problem.getSolutionSize(); //size of the problem
		var simplex = InitAmoeba(n, size);
		simplex = _.sortBy(simplex, function(num){return Problem.getScore(num)});

		this.bestLength = 0;
		var average = []; 
		var reflection = [];
		var expansion = [];
		var contraction = [];
		var b = new Boolean();
		
		this.step = function() {
			//console.log("simplex[n] score: " + Problem.getScore(simplex[n]));
			var score0 = Problem.getScore(simplex[0]);
			var scoreN = Problem.getScore(simplex[n]);
			
			average = getAverage(simplex); //finds average of all "legs" solutions
		
			//Reflect worst point over average
			reflection = vecAdd(average, vecScale(vecDiff(average, simplex[n]), reflectionCoeff));
			var scoreRef = Problem.getScore(reflection);

			//if scoreRef is better than the worst, but not as good as the best
			if(score0 < scoreRef && scoreRef < scoreN) { 
				simplex[n] = reflection;	
			}
			else {
				//if it gets here, either scoreRef < score0  OR scoreRef > scoreN
				if(scoreRef < score0) { 
					//Expand farther in smae direction ad reflection
					expansion = vecAdd(reflection, vecScale((vecDiff(reflection, average), expansionCoeff)));
					if(Problem.getScore(expansion) < scoreRef) {
						//console.log("expanding");
						simplex[n] = expansion;
					}
					else { 
						simplex[n] = reflection;
					}
				}
				else {
					//if it gets here, scoreRef > scoreN
					b = true;
					//Contract to a test point between reflection and average
					contraction = vecAdd(vecScale(reflection, contractionCoeff),vecScale(average,(1-contractionCoeff)));
					if(Problem.getScore(contraction) <= scoreN) {
						simplex[n] = contraction;
						b = false;
					}
					if(b) {
						//if it gets here scoreRef > scoreN AND scoreContraction > scoreN
						//Shrink towards simplex[0]
						for(var i = 1; i < n; i++) {
							simplex[i] = vecAdd(simplex[0], vecScale(vecDiff(simplex[i], simplex[0]),shrinkCoeff));
						}
					}
				}
			}
			simplex = _.sortBy(simplex, function(num){return Problem.getScore(num)});
			this.bestLength = Problem.getScore(simplex[0].slice(0));	
			//console.log(simplex[0]);
			return [simplex[0].slice()];
		}
}

function vecAdd(veca, vecb) {
	var sum = [];
	for(var i = 0; i < veca.length; i++){
		sum[i] = veca[i] + vecb[i];
	}
	return sum;
}

function vecDiff(veca, vecb) {
	var diff = [];
	for(var i = 0; i < veca.length; i++){
		diff[i] = veca[i] - vecb[i];
	}
	return diff;
}

function vecScale(veca, scalar) {
	var scaled = [];
	for(var i = 0; i < veca.length; i++){
		scaled[i] = veca[i] * scalar;
	}
	return scaled;
}

function vecClamp(vector){
	var clamped = [];
	for(var i = 0; i < vector.length; i++){
		if(vector[i] > 1)
			clamped[i] = 1;
		else if(vector[i] < 0)
			clamped[i] = 0;
		else
			clamped[i] = Number(vector[i].toFixed(4));
	}
	return clamped;
}

function getAverage(simplex) {
	var list_sum = _.reduce(simplex, function(a, b) {
		var sum = [];
		for(var i = 0; i < a.length; i++) {
			sum[i] = a[i] + b[i];	
		}
		return sum;
	}, _.range(simplex[0].length));
	
	var average = _.map(list_sum, function(num){return (num/simplex.length) });
	return average;	
}

function InitAmoeba(n, size){
	var amoeba = _.range(n+1);
	amoeba = _.map(amoeba, function(){
		return _.map(_.range(size), function() { 
			return Math.random();
			}); 
		});
	return amoeba;
}

return {Solver: AmoebaSolver, Params: [           
{"name": "Reflection Coefficient",
	"id" : "amParam1",
	"type": "float",
	"value": 1.22},
{"name": "Expansion Rate",
	"id" : "amParam2", 
	"type": "float",   
	"value": 1.24}, 
{"name": "Contraction Rate",
	"id" : "amParam3",
	"type": "float",
	"value": 0.41},    
{"name": "Shrink Rate",
	"id" : "amParam4",       
	"type": "float",
	"value": 0.64},            
{"name": "Population Size",
	"id" : "amParam5",       
	"type": "float",
	"value": 19},            
]
};

});
