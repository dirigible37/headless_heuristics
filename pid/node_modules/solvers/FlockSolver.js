define([], function () {
function FlockSolver(Problem, Parameters) {

		var personalWeight = Parameters["flockParam1"]; 
		var groupWeight = Parameters["flockParam2"];
		var inertiaWeight = Parameters["flockParam3"];
		var n = Parameters["flockParam4"];
		var size = Problem.getSolutionSize(); //size of the problem

		//console.log("Initializing Flock");
		//console.log("PopSize: " + n);
		//console.log("Problem Size: " + size);
		var birdPos = InitFlock(n, size); //current solution vectors
		var birdVel = InitFlock(n, size); 
		var birdPos = _.sortBy(birdPos, function(bird){return Problem.getScore(bird);});
		//console.log(birdPos[0]);
		var birdScores = _.map(birdPos, function(bird){return Problem.getScore(bird);}); //current bird scores
		var personalBest = birdPos.slice();
		var groupBest = birdPos[0].slice();
		var followBest = 0;
		//initialize bird score & personal best

		this.bestLength = 99999999999;
		this.bestTrail = groupBest.slice();
		this.avgLength = 0;

		this.step = function() {
			var predConst;
			for(var i = 0; i < n; i++) {
				if(birdScores[i] < Problem.getScore(personalBest[i]))
					personalBest[i] = birdPos[i].slice();
				if(birdScores[i] < Problem.getScore(groupBest)) {
					groupBest = birdPos[i].slice();
					followBest = i;
				}
				birdVel[i] = vecScale(birdVel[i], inertiaWeight);
				birdVel[i] = vecAdd(vecScale(vecScale(vecDiff(personalBest[i], birdPos[i]),Math.random()), personalWeight), birdVel[i]);
				birdVel[i] = vecAdd(vecScale(vecScale(vecDiff(groupBest, birdPos[i]),Math.random()), groupWeight), birdVel[i]);
				birdPos[i] = vecAdd(birdPos[i], birdVel[i]);
				
				//normalize(birdPos[i]);
				birdScores[i] = Problem.getScore(birdPos[i]);
			}
			if(Problem.getScore(groupBest) < this.bestLength) {
				this.bestTrail = groupBest.slice();
				this.bestLength = Problem.getScore(groupBest);
			}
			this.avgLength = 0; 
			for(var i = 0; i < n; i++) {
				this.avgLength += Problem.getScore(birdPos[i]);
			}
			this.avgLength /= n;
			return [normalize(this.bestTrail)];
		}
}

function getMagnitude(vector) {
	var magnitude = 0;
	for(var i = 0; i < vector.length; i++) {
		magnitude += Math.pow(vector[i], 2);
	}
	magnitude = Math.sqrt(magnitude)
		return magnitude;
}

function normalize(vector) {
	var magnitude = getMagnitude(vector);
	for(var i = 0; i < vector.length; i++) {
		vector[i] = vector[i] / magnitude;
	}
	return vector;
}

function vecAdd(veca, vecb) {
	var sum = [];
	for(var i = 0; i < veca.length; i++){
		sum[i] = veca[i] + vecb[i];
	}
	return sum;
}

function vecDiff(veca, vecb) {
	var diff = [];
	for(var i = 0; i < veca.length; i++){
		diff[i] = veca[i] - vecb[i];
	}
	return diff;
}

function vecScale(veca, scalar) {
	var scaled = [];
	for(var i = 0; i < veca.length; i++){
		scaled[i] = veca[i] * scalar;
	}
	return scaled;
}

function vecClamp(vector){
	var clamped = [];
	for(var i = 0; i < vector.length; i++){
		if(vector[i] > 1)
			clamped[i] = 1;
		else if(vector[i] < 0)
			clamped[i] = 0;
		else
			clamped[i] = vector[i];
	}
	return clamped;
}

function getAverage(simplex) {
	var list_sum = _.reduce(simplex, function(a, b) {
		var sum = [];
		for(var i = 0; i < a.length; i++) {
			sum[i] = a[i] + b[i];	
		}
		return sum;
	}, _.range(simplex[0].length));
	
	var average = _.map(list_sum, function(num){return (num/simplex.length) });
	return average;	
}

function InitFlock(n, size){
	var flock = _.range(n);
	flock = _.map(flock, function(){
		return _.map(_.range(size), function() { 
			return Math.random();
			}); 
		});
	return flock;
}

return {Solver: FlockSolver, Params: [           
{"name": "Personal Best Weight",
	"id" : "flockParam1", 
	"type": "float",   
	"value": 1.23}, 
{"name": "Group Best Weight",
	"id" : "flockParam2",
	"type": "float",
	"value": .46},    
{"name": "Inertia Weight",
	"id" : "flockParam3",       
	"type": "float",
	"value": 0.59},            
{"name": "Population Size",
	"id" : "flockParam4",       
	"type": "int",
	"value": 20},            
]
};

});
