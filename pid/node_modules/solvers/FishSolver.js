define([], function () {
function FlockSolver(Problem, Parameters) {

		var inertiaWeight = Parameters["fishParam1"];
		var personalWeight = Parameters["fishParam2"]; 
		var groupWeight = Parameters["fishParam3"];
		var n = Parameters["fishParam4"];
		var size = Problem.getSolutionSize(); //size of the problem

		console.log("Initializing Flock");
		var birdPos = InitFlock(n, size); //current solution vectors
		var birdVel = InitFlock(n, size); 
		var personalBest = birdPos;
		var birdScores = _.map(birdPos, function(bird){return Problem.getScore(bird);});
		var temp = _.sortBy(birdPos, function(bird){return Problem.getScore(bird);});
		var groupBest = temp[0];
		//initialize bird score & personal best

		this.bestLength = 0;
		
		this.step = function() {
			//TODO: Implement a "push" factor
			for(var i = 0; i < n; i++) {
				if(birdScores[i] < Problem.getScore(personalBest[i]))
					personalBest[i] = birdPos[i];
				if(birdScores[i] < Problem.getScore(groupBest))
					groupBest = birdPos[i];
				
				birdVel[i] = vecScale(birdVel[i], inertiaWeight);
				birdVel[i] = vecAdd(vecScale(vecScale(vecDiff(personalBest[i], birdPos[i]),Math.random()), personalWeight), birdVel[i]);
				birdVel[i] = vecAdd(vecScale(vecScale(vecDiff(groupBest, birdPos[i]),Math.random()), groupWeight), birdVel[i]);
				birdPos[i] = vecAdd(birdPos[i], birdVel[i]);
				
				birdScores[i] = Problem.getScore(birdPos[i]);
			}
			this.bestLength = Problem.getScore(groupBest);
			return [vecClamp(groupBest)];
		}
}

function vecAdd(veca, vecb) {
	var sum = [];
	for(var i = 0; i < veca.length; i++){
		sum[i] = veca[i] + vecb[i];
	}
	return sum;
}

function vecDiff(veca, vecb) {
	var diff = [];
	for(var i = 0; i < veca.length; i++){
		diff[i] = veca[i] - vecb[i];
	}
	return diff;
}

function vecScale(veca, scalar) {
	var scaled = [];
	for(var i = 0; i < veca.length; i++){
		scaled[i] = veca[i] * scalar;
	}
	return scaled;
}

function vecClamp(vector){
	var clamped = [];
	for(var i = 0; i < vector.length; i++){
		if(vector[i] > 1)
			clamped[i] = 1;
		else if(vector[i] < 0)
			clamped[i] = 0;
		else
			clamped[i] = vector[i];
	}
	return clamped;
}

function getAverage(simplex) {
	var list_sum = _.reduce(simplex, function(a, b) {
		var sum = [];
		for(var i = 0; i < a.length; i++) {
			sum[i] = a[i] + b[i];	
		}
		return sum;
	}, _.range(simplex[0].length));
	
	var average = _.map(list_sum, function(num){return (num/simplex.length) });
	return average;	
}

function InitFlock(n, size){
	var flock = _.range(n+1);
	flock = _.map(flock, function(){
		return _.map(_.range(size), function() { 
			return Math.random();
			}); 
		});
	return flock;
}

return {Solver: FlockSolver, Params: [           
{"name": "Inertia Weight",
	"id" : "fishParam1",
	"type": "float",
	"value": 1},
{"name": "Personal Best Weight",
	"id" : "fishParam2", 
	"type": "float",   
	"value": 1}, 
{"name": "Group Best Weight",
	"id" : "fishParam3",
	"type": "float",
	"value": 1},    
{"name": "Population Size",
	"id" : "fishParam4",       
	"type": "float",
	"value": 50},            
]
};

});
