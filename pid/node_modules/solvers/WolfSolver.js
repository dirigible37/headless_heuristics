define([], function (){
function WolfSolver(Problem, Parameters){
//	this.points = Problem.graph.vertices;
	this.probSize = Problem.getSolutionSize();
	this.problem = Problem;
	this.numWolves = Number(Parameters["WolfParam1"]); // 8
	this.replaceRate = Parameters["WolfParam2"] // 40
	this.mutationRate = Parameters["WolfParam3"] // 0.1
	this.numChildren = Parameters["WolfParam4"] // 2
	this.curRep = -1;
	var wolves = InitWolves(this.numWolves, this.probSize);
	this.convert = Problem.trailToWeightedSolution;
	this.Leaders = new Array(2);
	this.bestLength = Number.MAX_VALUE;
	this.Leaders[0] = wolves[0].slice(0);
	this.Leaders[1] = wolves[1].slice(0);
	this.bestSol = this.Leaders[0];

	this.step = function(){
		var prob = this.problem;
		wolves = _.sortBy(wolves, function(wolf){return prob.getScore(wolf)});
		
		var LeaderChanged = GetLeaders(this.Leaders, wolves, this.problem);
		var Children = Mate(this.Leaders, new Array(this.numChildren), this.mutationRate);
		wolves = ReplaceWorst(wolves, Children);
		if(LeaderChanged == 0){
			++this.curRep;
		}
		else
			 this.curRep = 0;

		if(this.curRep ==  this.replaceRate){
			for(var i = 1; i < this.numWolves; i++)
				wolves[i-1] = wolves[i];
			wolves[this.numWolves - 1] = RandomTrail(this.probsize);
		}

		wolves = _.sortBy(wolves, function(wolf){return prob.getScore(wolf)});
		var temp = Array();
		var curBest = this.problem.getScore(wolves[0]);
		if(curBest < this.bestLength){
			this.bestLength = curBest;
			this.bestSol = wolves[0].slice();
		}
		/*this.avgLength = 0; 
		for(var i = 0; i < this.numWolves; i++) {
			this.avgLength += prob.getScore(wolves[i]);
		}
		this.avgLength /= Number(this.numWolves);
		*/
		return [this.bestSol];
	}
}
function getMagnitude(vector) {
	var magnitude = 0;
	for(var i = 0; i < vector.length; i++) {
		magnitude += Math.pow(vector[i], 2);
	}
	magnitude = Math.sqrt(magnitude)
		return magnitude;
}

function normalize(vector) {
	var magnitude = getMagnitude(vector);
	for(var i = 0; i < vector.length; i++) {
		vector[i] = (vector[i] / magnitude).toFixed(5);
	}
	return vector;
}

function IndexOfTarget(trail, target){
   var temp = 0;
   for (var i = 0; i < trail.length; ++i)
   {
      if (trail[i] == target)
          return i;
   }
   return temp;
}

function InitWolves(numWolves, probSize){
	var wolves = _.range(numWolves);
	wolves = _.map(wolves, function(){
		return _.map(_.range(probSize), function() { 
			return Math.random();
			}); 
		});
	return wolves;
}

// Purpose of this function is to get the two best wolves in the new generation
function GetLeaders(currentLeaders, wolves, problem){
	var changed = 0;

	if(wolves[0] != currentLeaders[0]) {
		currentLeaders[0] = wolves[0];
		changed = 1;
	}

	if(wolves[1] != currentLeaders[1]) {
		currentLeaders[1] = wolves[1];
		changed = 1;
	}

	// Need to know if leader changed;
	if(changed = 0)
		return 0;
	else
		return -1;
}

function Mate(Leaders, Children, mutationRate){
	var Parent1 = Leaders[0].slice();
	var Parent2 = Leaders[1].slice();

	for(var i = 0; i < Children.length; i++) {
		Children[i] = _.range(0, Leaders[0].length);
		var ind1 = Math.floor(Math.random() * (Leaders[0].length));
		var ind2 = Math.floor(Math.random() * (Leaders[0].length));
		if(ind1 < ind2){
			for(var j = 0; j < Leaders[0].length; j++) {
				var rand = Math.random();
				if(rand > mutationRate) {
					if(j >= ind1 && j <= ind2)
						Children[i][j] = Parent1[j];
					else
						Children[i][j] = Parent2[j];
				}
				else
					Children[i][j] = Math.random();
			}
		}
		else{
			for(var j = 0; j < Leaders[0].length; j++) {
				var rand = Math.random();
				if(rand > mutationRate) {
					if(j >= ind2 && j <= ind1)
						Children[i][j] = Parent1[j];
					else
						Children[i][j] = Parent2[j];
				}
				else
					Children[i][j] = Math.random();
			}
		}
	}

	return Children;
}

function ReplaceWorst(wolves, children){
	for(var i = 0; i < children.length; i++) {
		wolves[wolves.length - 1 - i] = children[i];	
	}
	return wolves;
}

function RandomTrail(probSize){
   var trail = new Array(probSize);

	trail = _.map(trail, function(){ return Math.random();});
	return trail;
}

function Display(trail){
	var str = "";
	for (var i = 0; i < trail.length; ++i)
    {
         str = str + trail[i] + " ";
	}
    console.log(str);
}

return {Solver: WolfSolver, Params: [ {"name": "Number of Wolves",
									  "id" : "WolfParam1",
									  "type": "int",
									  "value": 6},
									 {"name": "Replacement Rate",
									  "id" : "WolfParam2",
									  "type": "int",
									  "value": 36},
									 {"name": "Mutation Rate",
									  "id" : "WolfParam3",
									  "type": "float",
									  "value": 0.71},
									 {"name": "Number of Children",
									  "id" : "WolfParam4",
									  "type": "int",
									  "value": 5}
								   ]};

});
