define([], function () {
function BaseSolver(Problem, Parameters) {
		
		//You can change the variable names, but these are parameters the user can set
		var param1 = Parameters["baseParam1"];
		var param2 = Parameters["baseParam2"]; 
		var param3 = Parameters["baseParam3"];
		var param4 = Parameters["baseParam4"];
	
		//use this to get the score of your solution vector
		Problem.getscore(/*vector*/);

		this.step = function() {
			/*This is where you will write the bulk of your program, this is a "step", 
			and it is what you do each "turn" your algorithm has. Each algorithm
			has the same amount of time to perform as many steps as it pleases. */

			//return vector of weights (the best solution you have)
			return [vecClamp(/*Best Solution Vector*/)];
		}
}
/***********************************************************************************/
/********** I've provided you with some basic vector operation functions ***********/
/********************* If you have questions, feel free to ask *********************/
/***********************************************************************************/

function vecAdd(veca, vecb) {
	var sum = [];
	for(var i = 0; i < veca.length; i++){
		sum[i] = veca[i] + vecb[i];
	}
	return sum;
}

function vecDiff(veca, vecb) {
	var diff = [];
	for(var i = 0; i < veca.length; i++){
		diff[i] = veca[i] - vecb[i];
	}
	return diff;
}

function vecScale(veca, scalar) {
	var scaled = [];
	for(var i = 0; i < veca.length; i++){
		scaled[i] = veca[i] * scalar;
	}
	return scaled;
}

//Clamps the weights to all being between 0 and 1. Do this before you 
//return your vector, the scoring function likes it like that. 
function vecClamp(vector){
	var clamped = [];
	for(var i = 0; i < vector.length; i++){
		if(vector[i] > 1)
			clamped[i] = 1;
		else if(vector[i] < 0)
			clamped[i] = 0;
		else
			clamped[i] = vector[i];
	}
	return clamped;
}

return {Solver: BaseSolver, Params: [           

//These are user-editable parameters
//feel free to change the name and starting values of them
//also feel free to add as many as you feel you need. 
{"name": "Parameter 1",
	"id" : "baseParam1",
	"type": "float",
	"value": 1},
{"name": "Parameter 2",
	"id" : "baseParam2", 
	"type": "float",   
	"value": 1}, 
{"name": "Parameter 3",
	"id" : "baseParam3",
	"type": "float",
	"value": 1},    
{"name": "Parmeter 4",
	"id" : "baseParam4",       
	"type": "float",
	"value": 50},            
]
};

});
