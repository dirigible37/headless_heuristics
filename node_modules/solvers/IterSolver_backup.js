define([], function () {
function IterSolver(Problem, Parameters){
   this.numCities = Problem.graph.vertices.length;
   this.points = Problem.graph.vertices;
   this.convert = Problem.trailToWeightedSolution;
   this.WeightedTrail = new Array(this.numCities);
   this.dists = MakeGraphDistances(this.numCities, this.points);
   this.trail = InitTrail(this.numCities);
   this.bestLength = -1;
   this.dist = 	Length(this.trail, this.dists);
   this.iter = 1;
   this.prevDist = -1;
}

IterSolver.prototype.step = function(){
    if(this.prevDist != this.dist)
    { 
	    var prevDist = this.dist;
		var tempInd1 = 0;
		var tempInd2 = 0;
		for(var j = 0; j < this.numCities; j++){
		   for(var k = j + 1; k < this.numCities; k++){
			   trail = Reverse(j,k,this.numCities,this.trail);
			   var tempDist = Length(this.trail, this.dists);
			   if(tempDist < this.dist){
			      this.dist = tempDist;
				  tempInd1 = j;
				  tempInd2 = k;
			   }
			   this.trail = Reverse(j,k,this.numCities, this.trail);
		   }
		}
		this.trail = Reverse(tempInd1, tempInd2, this.numCities, this.trail);
		this.bestLength = Length(this.trail, this.dists); 
		this.iter++;
	}
	
/*	if(this.prevDist == this.dist){
	    console.log("Iterations Complete");
	    console.log("Best Trail Found");
	    Display(this.trail);
	    console.log("Length of best trail found: " + Length(this.trail, this.dists));
	    console.log("");
	}*/

    return [this.convert(trail)];
}

function test(){
	var iterat = new IterSolver();
    for(var i = 0; i < 100; i++){
	    iterat.Step();
	}
}

function MakeGraphDistances(numCities, points){
   var dists = new Array(numCities);
            for (var i = 0; i < dists.length; ++i){
                dists[i] = new Array(numCities);
			}
            for (var i = 0; i < numCities; ++i){
                for (var j = i + 1; j < numCities; ++j)
                {
                    var d = cityDist(points[i], points[j]);
                    dists[i][j] = d;
                    dists[j][i] = d;
                }
			}
  return dists;
}

function cityDist(cityX, cityY){
   return Math.sqrt(Math.pow((cityX.x - cityY.x),2) + Math.pow((cityX.y - cityY.y),2));
}

function InitTrail(numCities){	
    var start = Math.floor(Math.random() * (numCities - 1));
    var trail = RandomTrail(start, numCities);
    return trail;
}

function RandomTrail(start, numCities){
   var trail = new Array(numCities);

            for (var i = 0; i < numCities; ++i) { trail[i] = i; } // sequential

            for (var i = 0; i < numCities; ++i) // Fisher-Yates shuffle
            {
                var r = Math.floor(Math.random() * (numCities- 1));
                var tmp = trail[r]; trail[r] = trail[i]; trail[i] = tmp;
            }

            var idx = IndexOfTarget(trail, start); // put start at [0]
            var temp = trail[0];
            trail[0] = trail[idx];
            trail[idx] = temp;

            return trail;
}

function IndexOfTarget(trail, target){
   var temp = 0;
   for (var i = 0; i < trail.length; ++i)
   {
      if (trail[i] == target)
          return i;
   }
   return temp;
}

function Length(trail, dists) // total length of a trail
{
     var result = 0.0;
     var i = 0;
     for (i = 0; i < trail.length - 1; ++i)
         result = result + Distance(trail[i], trail[i + 1], dists);
     result = result + Distance(trail[i], trail[0], dists);
     return result;
}

function Distance(city1, city2, dists){
   return dists[city1][city2];
}

function Display(trail){
	var str = "";
	for (var i = 0; i < trail.length; ++i)
    {
         str = str + trail[i] + " ";
	}
    console.log(str);
}

function Reverse(start, end, numCities, trail){
   while(start != end){
      trail = swap(start, end, trail);
      end--;
      if(end == start) 
        return trail;
      start++;
      if(end == -1)
         end = numCities - 1;
      if(start == numCities)
         start = 0;
   }
   return trail;
}

function swap(x, y, trail){
   var temp = trail[x];
   trail[x] = trail[y];
   trail[y] = temp;
   return trail;
}

return {Solver: IterSolver, Params: []};

});
