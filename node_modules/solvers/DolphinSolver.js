define([], function () {
	function DolphinSolver(Problem, Parameters) {

		//You can change the variable names, but these are parameters the user can set
		var dolphAmt = Parameters["amParam1"];
		var swimSpeed = Parameters["amParam2"];
		var param3 = Parameters["amParam3"];
		var param4 = Parameters["amParam4"];

		swimSpeed=clampToUnit(swimSpeed);
		this.bestLength = Number.MAX_VALUE;
		//use this to get the score of your solution vector
		Problem.getscore(/*vector*/);

		var dolphs = new Array(dolphAmt);
		//dolphs contains dolphin objects
		for (var n=0;n<dolphAmt;n++)
		{
		dolphs[n]=new Dolphin();
		dolphs[n].constructAnew();
		}
		/*-------------Step Function---------------------*/
		this.step = function()
		{
			for (var n=0;n<dolphAmt;n++)
			{
				dolphs[n].step(Problem);
			}
			//return vector of weights (the best solution you have)
			return [vecClamp(/*Best Solution Vector*/)];
		}

	}

	/*------------Dolphin Class-----------------*/
	function Dolphin ()
	{
		//Solution Vectors
		this.solution;//current position
		this.veloctiy;//movement
		this.echo;//solution dolphin is looking at
		var echoFitness;//saves recalculations

		this.constructAnew = function() {
			solution=randomSolution();
			echo=randomSolution();
			velocity=vecDiff(echo,solution);
			velocity=vecScale(velocity,0.1);
			echoFitness=-1;
		}

		this.step() = function(Problem)
		{
			var fitness=Problem.getscore(solution);
			if (echoFitness==-1)
				echoFitness=Problem.getscore(solution);
			if (fitness < DolphinSolver.bestLength)
				DolphinSolver.bestLength = fitness;
			if (echoFitness < fitness)
			{
				inPlaceScale(velocity,.6);// water drag
				//turn towards echo
				var accel=vecDiff(echo,solution);
				inPlaceScale(accel,.3);// acceleration factor
				addTo(velocity,accel);

				moveAlong(solution,velocity);

				var difference=roughMagnitude(vecDiff(solution,echo));
				if (difference < solution.length * .1)//proximity factor
				{//if close to echo
					changeEcho();
				}
			}
			else
			{
				changeEcho();
			}
		}
		this.changeEcho() = function()
		{
			mutate(echo);
			echoFitness=-1;//recalculate fitness on next step
		}

	}

	/*--------------Basic Vector Functions------------*/
	function mutate(solution)
	{//alters the original vector
		for (var i=0;i<vector.length;i++)
		{
			vector[i]+=randomChange();
		}
		inPlaceClamp(vector);
	}
	function randomChange()
	{//gives a random distribution
		//for a change in one variable in a solution vector

		//distribution is x^3;
		// -.5 ≤ ∆ ≤ .5
		var change=Math.random();
		change-=.5;
		change=Math.pow(change,3);
		change*=4;
		return change;
	}
	function magnitude(vector)
	{//mathematical magnitude
		var magn=0;
		for (var i=0;i<vector.length;i++)
			magn+=Math.pow(vector[i],2);
		return Math.sqrt(magn);
	}
	function roughMagnitude(vector)
	{//roughMagnitude = ∑ |vector[n]|
		var magn=0;
		for (var i=0;i<vector.length;i++)
			magn+=Math.abs(vector[i]);
		return magn;
	}
	function vecAdd(veca, vecb) {
		var sum = [];
		for(var i = 0; i < veca.length; i++){
			sum[i] = veca[i] + vecb[i];
		}
		return sum;
	}
	function addTo(veca, vecb)
	{//veca becomes the summ
		for(var i = 0; i < veca.length; i++){
			veca[i]+= vecb[i];
		}
	}

	function moveTowards(vecFrom,vecTo,rate)
	{//Edits the original vector
		for (var i=0;i<vecFrom.length;i++)
		{
			var difference=vecFrom[i]-vecTo[i];
			difference*=rate;// 0<rate<1
			vecFrom[i]-=difference;
		}
	}
	function moveAlong(vecPos,vecVelocity)
	{//edits the vecPos vector
		for (var i=0;i<vecPos.length;i++)
		{
			vecPos[i]+=vecVelocity[i];
		}      
	}
	function vecDiff(veca, vecb) {
		var diff = [];
		for(var i = 0; i < veca.length; i++){
			diff[i] = veca[i] - vecb[i];
		}
		return diff;
	}

	function vecScale(vec, scalar) {
		var scaled = [];
		for(var i = 0; i < vec.length; i++){
			scaled[i] = vec[i] * scalar;
		}
		return scaled;
	}
	function inPlaceScale(vec, scalar) {
		for(var i = 0; i < vec.length; i++) {
			vec[i] *= scalar;
		}
	}
	function randomSolution(size)
	{
		var arr=new Array(size);
		for (var n=0;n<size;n++)
			arr[n]=Math.random();
		return arr;
	}
	function toString(vector)
	{
		var string="";
		for (var i=0;i<vector.length;i++)
		{
			string+=vector[i]+" ";
		}
		return string;
	}

	//Clamps the weights to all being between 0 and 1. Do this before you
	//return your vector, the scoring function likes it like that.
	function vecClamp(vector){
		var clamped = [];
		for(var i = 0; i < vector.length; i++){
			if(vector[i] > 1)
				clamped[i] = 1;
			else if(vector[i] < 0)
				clamped[i] = 0;
			else
				clamped[i] = vector[i];
		}
		return clamped;
	}

	function inPlaceClamp(vector){
		for(var i = 0; i < vector.length; i++){
			if(vector[i] > 1)
				vector[i] = 1;
			else if(vector[i] < 0)
				vector[i] = 0;
		}
	}


	/*----------Miscellaneous Utility--------------*/
	function clampToUnit(x)
	{
		if (x<0)
			return 0;
		if (x>1)
			return 1;
		return x;
	}

	return {Solver: DolphinSolver, Params: [          

		//These are user-editable parameters
		//feel free to change the name and starting values of them
		//also feel free to add as many as you feel you need.
		{"name": "Dolphin Amount",
			"id" : "amParam1",
			"type": "int",
			"value": 5},
			{"name": "Swim Speed 2",
				"id" : "amParam2",
				"type": "float",  
				"value": .1}, // 0 < swim speed < 1
			{"name": "Parameter 3",
				"id" : "amParam3",
				"type": "float",
				"value": 1},    
			{"name": "Parmeter 4",
				"id" : "amParam4",      
				"type": "float",
				"value": 50},            
			]
	};
});
